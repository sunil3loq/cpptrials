
#do the z transform of the variables
python testztransform.py
python trainztransform.py


#change to the libsvm format
python csv2libsvm.py trainzpl.csv trainzpl.lsvm -s -l 388
python csv2libsvm.py testzpl.csv testzpl.lsvm -l 388 -s

#run the kmeans with sofia
./sofia-kmeans --k 300 --init_type random --opt_type mini_batch_kmeans --mini_batch_size 100 --iterations 500 --objective_after_init --objective_after_training --training_file ~/sunil/feb15/vowpaltest/trainzpl.lsvm --model_out ~/sunil/feb15/vowpaltest/modelz.cls --dimensionality 400

#get the testcluster mapping
./sofia-kmeans --model_in ~/sunil/feb15/vowpaltest/modelz.cls --test_file ~/sunil/feb15/vowpaltest/testzpl.lsvm --cluster_mapping_out ~/sunil/feb15/vowpaltest/testzpl.map --cluster_mapping_type rbf_kernel --cluster_mapping_param 0.001 --cluster_mapping_threshold 0.001

#get the traincluster mapping
./sofia-kmeans --model_in ~/sunil/feb15/vowpaltest/modelz.cls --test_file ~/sunil/feb15/vowpaltest/trainzpl.lsvm --cluster_mapping_out ~/sunil/feb15/vowpaltest/trainzpl.map --cluster_mapping_type rbf_kernel --cluster_mapping_param 0.001 --cluster_mapping_threshold 0.001

#convert libsvm to vw format files
python libsvm2vw.py trainzpl.map trainzpl.mapvw
python libsvm2vw.py testzpl.map testzpl.mapvw

#convert the dv from 0 to -1 for vw
sed -i s/^0/-1/g trainzpl.mapvw
sed -i s/^0/-1/g testzpl.mapvw

#run vw model
vw -d trainzpl.mapvw -f trainzpl.mapmodelvw -c -k --passes 100 --loss_function logistic

#predict on the test
vw -t -d testzpl.mapvw -i trainzpl.mapmodelvw -p testzpl.mappredvw --loss_function logistic

#get the actuals file for perf
cut -d ' ' -f 1 trainzpl.mapvw | sed s/-1/0/g > trainactuals
cut -d ' ' -f 1 testzpl.mapvw | sed s/-1/0/g > testactuals

#do the performance evaluation
perf.linux/perf -files testactuals testzpl.mappredvw -confusion

